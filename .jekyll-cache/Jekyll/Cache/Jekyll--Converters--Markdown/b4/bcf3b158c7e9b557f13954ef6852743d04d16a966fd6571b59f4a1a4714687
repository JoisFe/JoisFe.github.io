I"_T<p>Spring이 왜 생기게 되었는지 알기위해  순수한 자바코드로  예제를 작성해보며 Spring의 필요성을 느껴보고자 한다. <br />
<br /></p>

<p>사용할 IDE : IntelliJ <br />
<br />
프로젝트 생성 : start.spring.io에서<br />
Project : Gradle Project <br />
Spring Boot : 2.5.4<br />
Language : Java<br />
Packaging : Jar<br />
&lt;/b&gt;Dependencies : 선택 X &lt;/b&gt;<br />
<br />
아니 순수 자바코드로만 작성한다 해놓고 왜 스프링 부트 스타터로 프로젝트 생성 ?? <br />
-&gt; 단순히 프로젝트 환경설정을 편리하게 설정하기 위해서 임, Dependencies 아무것도 설정 안했으니 Spring boot가 core 쪽 library만을 가지고 project 만든다. <br /><br /></p>

<p>예제는 특정 상황을 가정할 것이다. <br />
비즈니스 요구사항이 주어질 것이고 그 요구사항에 맞게 설계를 할 것이다.<br />
처음에는 순수 자바코드로 작성할 것임 !! <br /></p>

<h1 id="요구-사항-">요구 사항 :</h1>
<h3 id="회원-">회원 :</h3>
<ol>
  <li>회원가입을하고 해당 회원을 조회할 수 있음<br /></li>
  <li>회원은 2가지 등급이 존재  (1) 일반 등급, (2) VIP 등급 <br /></li>
  <li>회원 데이터는 자체 DB를 구축할 수도 있고 외부 시스템과 연동할 수도 있음 -&gt; 미확정인 상태임 !!!</li>
</ol>

<h3 id="주문과-할인-정책-">주문과 할인 정책 :</h3>
<ol>
  <li>회원가입을 한 회원은 상품을 주문할 수 있음<br /></li>
  <li>회원은 등급에 따라서 할인 정책을 적용받을 수 있음 <br /></li>
  <li>할인 정책은 모든 VIP등급의 회원들에게 1000원을 할인해 주는 고정 금액 할인을 적용해 달라는 요구가 있음 (나중에 변경될 수 있음) <br /></li>
  <li>할인 정책은 변경가능성이 높기 때문에 (아직 기본 할인 정책을 회사에서 정하지 못함), 오픈 직전까지 이 고민을 미루려고 함 <br />
 혹은 할인을 적용 안할수도 있음 <br /><br /></li>
</ol>

<p>### 요구 사항에서 약간 골치아픈 문제가 2개이다. <br /></p>
<ol>
  <li>회원 데이터에 대한 부분이 아직 미확정인 상태 <br /></li>
  <li>할인정책이 변경가능성이 크고 적용 안할 가능성 또한 있음 <br />
<br /></li>
</ol>

<p>이러한 문제점이 있다고 해서 정책이 확실히 결정되기 까지 해당 부분 개발을 하지않고 기다릴 수는 없다. &lt;br.
그럼 어떻게 해결 해야할까??<br />
<br /></p>

<p>이전에 객체 지향 설계 방법의 장점을 기억할 것이다. <br />
역할과 구현을 나누면 (인터페이스와 구현 객체 생각!!) -&gt; 유연하고 변경이 용이해짐 <br />
<b>즉 인터페이스를 만들고 구현체를 얼마든지 갈아끼울 수 있도록 설계하면 됨 </b> <br />
<br /></p>

<h1 id="설계를-시작해보자">설계를 시작해보자</h1>

<p>먼저 도메인을 설계 해보자.</p>

<h2 id="회원-도메인-설계">회원 도메인 설계</h2>

<h3 id="회원-도메인-요구-사항">회원 도메인 요구 사항</h3>
<ol>
  <li>회원가입 할 수 있고 회원가입한 회원을 조회할 수 있음 <br /></li>
  <li>회원은 일반과 VIP 두 가지 등급 존재 <br /></li>
  <li>회원 데이터는 자체 DB를 구축 할 수 잇고 외부 시스템과 연동할 수도 있다. (미확정인 상태) <br /></li>
</ol>

<h3 id="회원-도메인-협력-관계">회원 도메인 협력 관계</h3>
<p><img src="/images/Spring_basic(2)_files/회원 도메인 협력관계.jpeg" alt="jpeg" />
<br />
여기서 클라이언트, 회원 서비스, 회원 저장소 3개는 역할 <br />
회원 데이터를 어떻게 저장하지 아직 확실히 정하지 않았으니 <br />
일단 먼저 DB를 구축하기 전에 기본적인 메모리 회원 저장소를 구현하고 <br />
차 후에 DB 회원 저장소, 외부 시스템 연동 회원 저장소를 구현 하려 한다. <bn>
즉 회원 저장소 역할의 구현으로 메모리 회원 저장소, DB 회원 저장소, 외부 시스템 회원 저장소 3가지를 구현하고자 한다. <br /><br /></bn></p>

<h3 id="회원-클래스-다이어그램">회원 클래스 다이어그램</h3>
<p><img src="/images/Spring_basic(2)_files/회원 클래스 다이어그램.jpeg" alt="jpeg" />
<br />
회원 도메인 협력 관게를 클래스로 나타내보면 회원 클래스 다이어그램과 같다. <br />
각 역할들을 interface로, 역할들에 대한 구체적인 구현을 인터페이스에 상속받은 클래스로 구현하였다. <br />
<br />
간단히 정리하자면 <br />
인터페이스 : 역할 <br />
상속받은 다른 클래스 : 구현 <br />
<br />
인터페이스는 메서드 선언만 하고 <br />
상속 받은 다른 클래스는 implements 상속으로 메서드 정의 (메서드 오버라이딩)<br /><br /></p>

<p>MemoryMemberRepository 클래스 경우 일단 간단한 메모리 저장하는 역할을 하는 클래스를 정의 하였고 <br />
DbMembeerRepository 클래스 경우 자체 DB 구축 에 대해서 정의할 클래스이다. (DB 부분은 차후에 정의할 것) <br />
<br /></p>

<p>이렇게 역활과 구현을 분리해 두면 유연하고 변경이 용이해 지기 때문에 이전에 비즈니스 요구사항 중 회원 데이터 부분이 아직 미확정 이라고 하였는데 나중에 변경이 일어나도 유연하게 대처가 가능해진다. <br /><br /></p>

<h3 id="회원-객체-다이어-그램">회원 객체 다이어 그램</h3>
<p><img src="/images/Spring_basic(2)_files/회원 객체 다이어그램.jpeg" alt="jpeg" />
<br /></p>

<p>클래스 다이어그램에서 정의한 클래스를 이용해 객체를 만들어 객체간의 참조 구조를 작성해보면 위와 같다.<br />
<br /></p>

<p>회원 서비스 경우에는 new MemberServiceImpl(); 을 통해  <br />
메모리 회원 저장소경우에는 new MemoryMemberRepository();를 통해  <br />
객체를 생성하고자 한다. <br /> <br /></p>

<h1 id="회원-도메인-구조를-기준으로-코드로-작성해보도록-하자-">회원 도메인 구조를 기준으로 코드로 작성해보도록 하자. <br /></h1>

<p>코드 작성에 앞서 패키지 이름은 spring_basic이다. <br />
코드 윗부분에 패키지, 클래스 명을 보면 파일 구조를 파악할 수 있을 것이다. <br /></p>

<p>마지막 부분에 전체적인 파일 구조를 정리하도록 하겠다. <br /></p>

<h3 id="gradle-전체설정">Gradle 전체설정</h3>
<p>build.gradle</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plugins</span> <span class="o">{</span>
	<span class="n">id</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="err">'</span> <span class="n">version</span> <span class="err">'</span><span class="mf">2.5</span><span class="o">.</span><span class="mi">4</span><span class="err">'</span>
	<span class="n">id</span> <span class="err">'</span><span class="n">io</span><span class="o">.</span><span class="na">spring</span><span class="o">.</span><span class="na">dependency</span><span class="o">-</span><span class="n">management</span><span class="err">'</span> <span class="n">version</span> <span class="err">'</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">11</span><span class="o">.</span><span class="na">RELEASE</span><span class="err">'</span>
	<span class="n">id</span> <span class="err">'</span><span class="n">java</span><span class="err">'</span>
<span class="o">}</span>

<span class="n">group</span> <span class="o">=</span> <span class="err">'</span><span class="n">hello</span><span class="err">'</span>
<span class="n">version</span> <span class="o">=</span> <span class="err">'</span><span class="mf">0.0</span><span class="o">.</span><span class="mi">1</span><span class="o">-</span><span class="no">SNAPSHOT</span><span class="err">'</span>
<span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="err">'</span><span class="mi">11</span><span class="err">'</span>

<span class="n">repositories</span> <span class="o">{</span>
	<span class="n">mavenCentral</span><span class="o">()</span>
<span class="o">}</span>

<span class="n">dependencies</span> <span class="o">{</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="err">'</span>
	<span class="n">testImplementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">test</span><span class="err">'</span>
<span class="o">}</span>

<span class="n">test</span> <span class="o">{</span>
	<span class="n">useJUnitPlatform</span><span class="o">()</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="회원-엔티티에-대해-작성해-보자-">회원 엔티티에 대해 작성해 보자 <br /></h2>

<h3 id="회원-등급">회원 등급</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">hello.spring_basic.member</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">enum</span> <span class="nc">Grade</span> <span class="o">{</span> <span class="c1">//Enum으로  회원의 등급 설정</span>
    <span class="nc">Basic</span><span class="o">,</span>
    <span class="no">VIP</span>
<span class="o">}</span>

<span class="c1">//Enum class는 열거형이라 불리며 서로 연관된 상수들의 집합을 의미</span>
<span class="c1">//(기존 상수를 정의하던 final static string과 같이 문자열이나 숫자들을 나타낸는 기본자료형의 값을 enum 이용해서 나타낼 수 있음)</span>
</code></pre></div></div>

<h3 id="회원-엔티티">회원 엔티티</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">hello.spring_basic.member</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span> <span class="c1">//회원 entity에 대한 클래스를 만듬</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Grade</span> <span class="n">grade</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Member</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">Grade</span> <span class="n">grade</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">grade</span> <span class="o">=</span> <span class="n">grade</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Grade</span> <span class="nf">getGrade</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">grade</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGrade</span><span class="o">(</span><span class="nc">Grade</span> <span class="n">grade</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">grade</span> <span class="o">=</span> <span class="n">grade</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="회윈-저장소에-대해-작성해-보자">회윈 저장소에 대해 작성해 보자</h2>

<h3 id="회원-저장소-인터페이스">회원 저장소 인터페이스</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">hello.spring_basic.member</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MemberRepository</span> <span class="o">{</span>  <span class="c1">//인터페이스</span>
    <span class="kt">void</span> <span class="nf">save</span> <span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">);</span> <span class="c1">// 회원을 저장하는 메서드</span>

    <span class="nc">Member</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">memberId</span><span class="o">);</span> <span class="c1">//회원의 아이디로 회원을 찾는 메서드</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="메모리-회원-저장소-구현체">메모리 회원 저장소 구현체</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">hello.spring_basic.member</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemoryMemberRepository</span> <span class="kd">implements</span> <span class="nc">MemberRepository</span> <span class="o">{</span>
    <span class="c1">//implements : 부모 객체는 선언만 하며 정의(내용)은 자식에서 오버라이딩 해서 사</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">Member</span><span class="o">&gt;</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span> <span class="c1">// 데이터 저장하기 위해 해시맵에 데이터 저장</span>

    <span class="c1">// HashMap은 사실 동시성 문제가 발생할 수 있으므로 그런 경우에는 ConcurrentHashMap 사용하면 된다. </span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">store</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">member</span><span class="o">);</span>
    <span class="o">}</span> <span class="c1">//회원 저장하는 메서드 정의</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">memberId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">store</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">memberId</span><span class="o">);</span>
    <span class="o">}</span> <span class="c1">//회원 ID로 회원 찾는 메서드 정의</span>
    
    <span class="c1">//인터페이스에서 선언한 메서드를 구체적으로 메서드 정의 -&gt; 구현</span>
<span class="o">}</span>

</code></pre></div></div>
<p><br />
DB가 아직 확정이 되지 않았음. 하지만 그렇다고 개발을 안할수는 없음. <br />
-&gt; 개발은 진행하되 단순한 메모리 회원 저장소(단순히 해시맵에 저장하여 구현)를 구현해서 개발 진행할 것
<br /><br /></p>

<h2 id="회원-서비스에-대해-작성해-보자">회원 서비스에 대해 작성해 보자.</h2>

<h3 id="회원-서비스-인터페이스">회원 서비스 인터페이스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">hello.spring_basic.member</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MemberService</span> <span class="o">{</span>

    <span class="kt">void</span> <span class="nf">join</span> <span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">);</span> <span class="c1">//회원 가입 메서드 선언</span>

    <span class="nc">Member</span> <span class="nf">findMember</span><span class="o">(</span><span class="nc">Long</span> <span class="n">memberId</span><span class="o">);</span> <span class="c1">// 회원 조회 메서드 선언</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="회원-서비스-구현체">회원 서비스 구현체</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">hello.spring_basic.member</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span>   <span class="nc">MemberServiceImpl</span> <span class="kd">implements</span> <span class="nc">MemberService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryMemberRepository</span><span class="o">();</span> <span class="c1">// 회원 가입 메서드 정의</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">join</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">findMember</span><span class="o">(</span><span class="nc">Long</span> <span class="n">memberId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">memberId</span><span class="o">);</span>
    <span class="o">}</span> <span class="c1">// 회원 조회 메서드 정의</span>
    
    <span class="c1">// 인터페이스에서 선언한 메서드를 구체적으로 메서드 정의 -&gt; 구현</span>
<span class="o">}</span>

</code></pre></div></div>

:ET