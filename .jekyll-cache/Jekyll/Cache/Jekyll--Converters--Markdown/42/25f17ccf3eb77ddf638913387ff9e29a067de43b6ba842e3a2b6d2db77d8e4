I"F<p>Spring이 왜 생기게 되었는지 알기위해  순수한 자바코드로  예제를 작성해보며 Spring의 필요성을 느껴보고자 한다. <br />
<br /></p>

<p>사용할 IDE : IntelliJ <br />
<br />
프로젝트 생성 : start.spring.io에서<br />
Project : Gradle Project <br />
Spring Boot : 2.5.4<br />
Language : Java<br />
Packaging : Jar<br />
&lt;/b&gt;Dependencies : 선택 X &lt;/b&gt;<br />
<br />
아니 순수 자바코드로만 작성한다 해놓고 왜 스프링 부트 스타터로 프로젝트 생성 ?? <br />
-&gt; 단순히 프로젝트 환경설정을 편리하게 설정하기 위해서 임, Dependencies 아무것도 설정 안했으니 Spring boot가 core 쪽 library만을 가지고 project 만든다. <br /><br /></p>

<p>예제는 특정 상황을 가정할 것이다. <br />
비즈니스 요구사항이 주어질 것이고 그 요구사항에 맞게 설계를 할 것이다.<br />
처음에는 순수 자바코드로 작성할 것임 !! <br /></p>

<h1 id="요구-사항-">요구 사항 :</h1>
<h3 id="회원-">회원 :</h3>
<ol>
  <li>회원가입을하고 해당 회원을 조회할 수 있음<br /></li>
  <li>회원은 2가지 등급이 존재  (1) 일반 등급, (2) VIP 등급 <br /></li>
  <li>회원 데이터는 자체 DB를 구축할 수도 있고 외부 시스템과 연동할 수도 있음 -&gt; 미확정인 상태임 !!!</li>
</ol>

<h3 id="주문과-할인-정책-">주문과 할인 정책 :</h3>
<ol>
  <li>회원가입을 한 회원은 상품을 주문할 수 있음<br /></li>
  <li>회원은 등급에 따라서 할인 정책을 적용받을 수 있음 <br /></li>
  <li>할인 정책은 모든 VIP등급의 회원들에게 1000원을 할인해 주는 고정 금액 할인을 적용해 달라는 요구가 있음 (나중에 변경될 수 있음) <br /></li>
  <li>할인 정책은 변경가능성이 높기 때문에 (아직 기본 할인 정책을 회사에서 정하지 못함), 오픈 직전까지 이 고민을 미루려고 함 <br />
 혹은 할인을 적용 안할수도 있음 <br /><br /></li>
</ol>

<p>### 요구 사항에서 약간 골치아픈 문제가 2개이다. <br /></p>
<ol>
  <li>회원 데이터에 대한 부분이 아직 미확정인 상태 <br /></li>
  <li>할인정책이 변경가능성이 크고 적용 안할 가능성 또한 있음 <br />
<br /></li>
</ol>

<p>이러한 문제점이 있다고 해서 정책이 확실히 결정되기 까지 해당 부분 개발을 하지않고 기다릴 수는 없다. &lt;br.
그럼 어떻게 해결 해야할까??<br />
<br /></p>

<p>이전에 객체 지향 설계 방법의 장점을 기억할 것이다. <br />
역할과 구현을 나누면 (인터페이스와 구현 객체 생각!!) -&gt; 유연하고 변경이 용이해짐 <br />
<b>즉 인터페이스를 만들고 구현체를 얼마든지 갈아끼울 수 있도록 설계하면 됨 </b> <br />
<br /></p>

<h1 id="설계를-시작해보자">설계를 시작해보자</h1>

<p>먼저 도메인을 설계 해보자.</p>

<h2 id="회원-도메인-설계">회원 도메인 설계</h2>

<h3 id="회원-도메인-요구-사항">회원 도메인 요구 사항</h3>
<ol>
  <li>회원가입 할 수 있고 회원가입한 회원을 조회할 수 있음 <br /></li>
  <li>회원은 일반과 VIP 두 가지 등급 존재 <br /></li>
  <li>회원 데이터는 자체 DB를 구축 할 수 잇고 외부 시스템과 연동할 수도 있다. (미확정인 상태) <br /></li>
</ol>

<h3 id="회원-도메인-협력-관계">회원 도메인 협력 관계</h3>
<p><img src="/images/Spring_basic(2)_files/회원 도메인 협력관계.jpeg" alt="jpeg" />
<br />
여기서 클라이언트, 회원 서비스, 회원 저장소 3개는 역할 <br />
회원 데이터를 어떻게 저장하지 아직 확실히 정하지 않았으니 <br />
일단 먼저 DB를 구축하기 전에 기본적인 메모리 회원 저장소를 구현하고 <br />
차 후에 DB 회원 저장소, 외부 시스템 연동 회원 저장소를 구현 하려 한다. <bn>
즉 회원 저장소 역할의 구현으로 메모리 회원 저장소, DB 회원 저장소, 외부 시스템 회원 저장소 3가지를 구현하고자 한다. <br /><br /></bn></p>

<h3 id="회원-클래스-다이어그램">회원 클래스 다이어그램</h3>
<p><img src="/images/Spring_basic(2)_files/회원 클래스 다이어그램.jpeg" alt="jpeg" />
<br />
회원 도메인 협력 관게를 클래스로 나타내보면 회원 클래스 다이어그램과 같다. <br />
각 역할들을 interface로, 역할들에 대한 구체적인 구현을 인터페이스에 상속받은 클래스로 구현하였다. <br />
<br />
간단히 정리하자면 <br />
인터페이스 : 역할 <br />
상속받은 다른 클래스 : 구현 <br />
<br />
인터페이스는 메서드 선언만 하고 <br />
상속 받은 다른 클래스는 implements 상속으로 메서드 정의 (메서드 오버라이딩)<br /><br /></p>

<p>MemoryMemberRepository 클래스 경우 일단 간단한 메모리 저장하는 역할을 하는 클래스를 정의 하였고 <br />
DbMembeerRepository 클래스 경우 자체 DB 구축 에 대해서 정의할 클래스이다. (DB 부분은 차후에 정의할 것) <br />
<br /></p>

<p>이렇게 역활과 구현을 분리해 두면 유연하고 변경이 용이해 지기 때문에 이전에 비즈니스 요구사항 중 회원 데이터 부분이 아직 미확정 이라고 하였는데 나중에 변경이 일어나도 유연하게 대처가 가능해진다. <br /><br /></p>

<h3 id="회원-객체-다이어-그램">회원 객체 다이어 그램</h3>
<p><img src="/images/Spring_basic(2)_files/회원 객체 다이어그램.jpeg" alt="jpeg" /></p>
:ET